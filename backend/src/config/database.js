// üóÑÔ∏è CONFIGURACI√ìN DE BASE DE DATOS CON PRISMA
// src/config/database.js

const { PrismaClient } = require('@prisma/client');

// üîß Configuraci√≥n del cliente Prisma
const prismaConfig = {
  // Configuraci√≥n de logging basada en entorno
  log: process.env.NODE_ENV === 'production' 
    ? ['error', 'warn']
    : ['query', 'info', 'warn', 'error'],
    
  // Configuraci√≥n de errores
  errorFormat: 'pretty',
  
  // Configuraci√≥n de conexiones para mejor rendimiento
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  }
};

// üè≠ Singleton del cliente Prisma
let prisma;

// üîó Funci√≥n para crear conexi√≥n
const createPrismaClient = () => {
  if (!process.env.DATABASE_URL) {
    throw new Error('DATABASE_URL no est√° definida en las variables de entorno');
  }

  console.log('[DB] Creando cliente Prisma...');
  console.log('[DB] Database URL configurada:', process.env.DATABASE_URL.replace(/:[^:@]+@/, ':****@'));
  
  const client = new PrismaClient(prismaConfig);
  
  // üìä Event listeners para monitoreo
  client.$on('query', (e) => {
    if (process.env.NODE_ENV !== 'production') {
      console.log(`[DB-QUERY] ${e.query} - ${e.duration}ms`);
    }
  });
  
  client.$on('error', (e) => {
    console.error('[DB-ERROR]', e);
  });
  
  client.$on('warn', (e) => {
    console.warn('[DB-WARN]', e);
  });
  
  // üîå Hook de conexi√≥n
  client.$connect()
    .then(() => console.log('[DB] ‚úÖ Cliente Prisma conectado exitosamente'))
    .catch((error) => console.error('[DB] ‚ùå Error conectando cliente Prisma:', error));
  
  return client;
};

// üîó Funci√≥n para obtener o crear cliente
const getPrismaClient = () => {
  if (!prisma) {
    prisma = createPrismaClient();
  }
  return prisma;
};

// üöÄ Funci√≥n de conexi√≥n a la base de datos
const connectDatabase = async () => {
  try {
    const client = getPrismaClient();
    
    // Verificar conexi√≥n con una query simple
    await client.$queryRaw`SELECT 1 as connected`;
    
    console.log('[DB] ‚úÖ Conexi√≥n a la base de datos verificada');
    
    // üß™ Verificar si las tablas existen
    try {
      await client.inspeccion.count();
      console.log('[DB] ‚úÖ Tablas de la base de datos accesibles');
    } catch (error) {
      console.warn('[DB] ‚ö†Ô∏è  Las tablas pueden no existir a√∫n. Ejecuta: npx prisma db push');
    }
    
    return client;
  } catch (error) {
    console.error('[DB] ‚ùå Error conectando a la base de datos:', error);
    throw new Error(`Error de conexi√≥n a la base de datos: ${error.message}`);
  }
};

// üîå Funci√≥n de desconexi√≥n
const disconnectDatabase = async () => {
  if (prisma) {
    try {
      await prisma.$disconnect();
      console.log('[DB] üîå Base de datos desconectada');
      prisma = null;
    } catch (error) {
      console.error('[DB] ‚ùå Error desconectando la base de datos:', error);
    }
  }
};

// üß™ Funci√≥n de health check de la base de datos
const databaseHealthCheck = async () => {
  try {
    const startTime = Date.now();
    const client = getPrismaClient();
    
    // Test de conectividad b√°sico
    await client.$queryRaw`SELECT 1 as health_check`;
    const responseTime = Date.now() - startTime;
    
    // Test de conteo de registros
    const totalInspecciones = await client.inspeccion.count();
    const totalArchivos = await client.archivosProcesados.count();
    
    return {
      status: 'healthy',
      responseTime: `${responseTime}ms`,
      totalInspecciones,
      totalArchivos,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    return {
      status: 'unhealthy',
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
};

// üîÑ Funci√≥n para reiniciar conexi√≥n si es necesario
const reconnectDatabase = async () => {
  console.log('[DB] üîÑ Reiniciando conexi√≥n a la base de datos...');
  
  try {
    await disconnectDatabase();
    await new Promise(resolve => setTimeout(resolve, 1000)); // Esperar 1 segundo
    return await connectDatabase();
  } catch (error) {
    console.error('[DB] ‚ùå Error reiniciando la base de datos:', error);
    throw error;
  }
};

// üìä Funci√≥n para obtener estad√≠sticas de la base de datos
const getDatabaseStats = async () => {
  try {
    const client = getPrismaClient();
    
    const stats = await Promise.all([
      client.inspeccion.count(),
      client.inspeccion.count({ where: { tiene_alerta_roja: true } }),
      client.inspeccion.count({ where: { tiene_advertencias: true } }),
      client.historialConductor.count(),
      client.archivosProcesados.count()
    ]);
    
    return {
      totalInspecciones: stats[0],
      alertasRojas: stats[1], 
      advertencias: stats[2],
      conductores: stats[3],
      archivos: stats[4],
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('[DB] Error obteniendo estad√≠sticas:', error);
    return null;
  }
};

// üßπ Funci√≥n de limpieza y optimizaci√≥n
const optimizeDatabase = async () => {
  try {
    const client = getPrismaClient();
    
    console.log('[DB] üßπ Iniciando optimizaci√≥n de base de datos...');
    
    // Eliminar archivos procesados antiguos (m√°s de 90 d√≠as)
    const fecha90Dias = new Date();
    fecha90Dias.setDate(fecha90Dias.getDate() - 90);
    
    const archivosEliminados = await client.archivosProcesados.deleteMany({
      where: {
        fecha_procesamiento: {
          lt: fecha90Dias
        }
      }
    });
    
    console.log(`[DB] üóëÔ∏è  Eliminados ${archivosEliminados.count} archivos antiguos`);
    
    // Actualizar m√©tricas
    await client.metricasReporte.deleteMany({
      where: {
        fecha_reporte: {
          lt: fecha90Dias
        }
      }
    });
    
    console.log('[DB] ‚úÖ Optimizaci√≥n completada');
    
    return {
      archivosEliminados: archivosEliminados.count,
      fecha: new Date().toISOString()
    };
  } catch (error) {
    console.error('[DB] ‚ùå Error durante la optimizaci√≥n:', error);
    throw error;
  }
};

// üß™ Testing de queries para desarrollo
const testDatabaseQueries = async () => {
  if (process.env.NODE_ENV === 'production') {
    console.log('[DB] Tests de queries deshabilitados en producci√≥n');
    return;
  }
  
  try {
    const client = getPrismaClient();
    
    console.log('[DB] üß™ Ejecutando tests de queries...');
    
    // Test 1: Query b√°sica
    const basicQuery = await client.inspeccion.findMany({
      take: 1
    });
    
    // Test 2: Query con relaciones
    const relationQuery = await client.inspeccion.findFirst({
      include: {
        historial: true
      }
    });
    
    // Test 3: Agregaciones
    const aggregateQuery = await client.inspeccion.aggregate({
      _count: true,
      _avg: {
        puntaje_total: true
      }
    });
    
    console.log('[DB] ‚úÖ Tests de queries exitosos');
    console.log('[DB] Basic query count:', basicQuery.length);
    console.log('[DB] Aggregate result:', aggregateQuery);
    
  } catch (error) {
    console.error('[DB] ‚ùå Error en tests de queries:', error);
  }
};

module.exports = {
  getPrismaClient,
  connectDatabase,
  disconnectDatabase,
  databaseHealthCheck,
  reconnectDatabase,
  getDatabaseStats,
  optimizeDatabase,
  testDatabaseQueries
};