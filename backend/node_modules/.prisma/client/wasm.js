
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.InspeccionScalarFieldEnum = {
  id: 'id',
  fecha: 'fecha',
  marca_temporal: 'marca_temporal',
  nombre_inspector: 'nombre_inspector',
  contrato: 'contrato',
  campo_coordinacion: 'campo_coordinacion',
  placa_vehiculo: 'placa_vehiculo',
  kilometraje: 'kilometraje',
  turno: 'turno',
  altas_bajas: 'altas_bajas',
  direccionales: 'direccionales',
  parqueo: 'parqueo',
  freno: 'freno',
  reversa_alarma: 'reversa_alarma',
  espejos: 'espejos',
  vidrio_frontal: 'vidrio_frontal',
  orden_aseo: 'orden_aseo',
  pito: 'pito',
  gps: 'gps',
  frenos: 'frenos',
  freno_emergencia: 'freno_emergencia',
  cinturones: 'cinturones',
  puertas: 'puertas',
  vidrios: 'vidrios',
  limpia_brisas: 'limpia_brisas',
  extintor_vigente: 'extintor_vigente',
  botiquin: 'botiquin',
  tapiceria: 'tapiceria',
  indicadores: 'indicadores',
  objetos_sueltos: 'objetos_sueltos',
  aceite_motor: 'aceite_motor',
  fluido_frenos: 'fluido_frenos',
  fluido_direccion: 'fluido_direccion',
  fluido_refrigerante: 'fluido_refrigerante',
  fluido_limpia_parabrisas: 'fluido_limpia_parabrisas',
  correas: 'correas',
  baterias: 'baterias',
  llantas_labrado: 'llantas_labrado',
  llantas_sin_cortes: 'llantas_sin_cortes',
  llanta_repuesto: 'llanta_repuesto',
  copas_pernos_llantas: 'copas_pernos_llantas',
  suspension: 'suspension',
  direccion_terminales: 'direccion_terminales',
  tapa_tanque: 'tapa_tanque',
  equipo_carretera: 'equipo_carretera',
  kit_ambiental: 'kit_ambiental',
  documentacion: 'documentacion',
  observaciones: 'observaciones',
  horas_sueno: 'horas_sueno',
  libre_fatiga: 'libre_fatiga',
  condiciones_aptas: 'condiciones_aptas',
  consumo_medicamentos: 'consumo_medicamentos',
  placa_vehiculo_extra: 'placa_vehiculo_extra',
  tiene_alerta_roja: 'tiene_alerta_roja',
  tiene_advertencias: 'tiene_advertencias',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HistorialConductorScalarFieldEnum = {
  id: 'id',
  conductor_nombre: 'conductor_nombre',
  total_inspecciones: 'total_inspecciones',
  alertas_rojas_total: 'alertas_rojas_total',
  advertencias_total: 'advertencias_total',
  ultima_inspeccion: 'ultima_inspeccion',
  promedio_riesgo: 'promedio_riesgo',
  dias_sin_incidentes: 'dias_sin_incidentes',
  inspeccionId: 'inspeccionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MetricasReporteScalarFieldEnum = {
  id: 'id',
  fecha_reporte: 'fecha_reporte',
  ano: 'ano',
  mes: 'mes',
  total_inspecciones: 'total_inspecciones',
  total_conductores: 'total_conductores',
  total_vehiculos: 'total_vehiculos',
  alertas_rojas: 'alertas_rojas',
  advertencias: 'advertencias',
  inspecciones_exitosas: 'inspecciones_exitosas',
  conductores_medicamentos: 'conductores_medicamentos',
  conductores_poco_sueno: 'conductores_poco_sueno',
  conductores_con_sintomas: 'conductores_con_sintomas',
  conductores_no_aptos: 'conductores_no_aptos',
  metricas_por_contrato: 'metricas_por_contrato',
  metricas_por_campo: 'metricas_por_campo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ArchivosProcesadosScalarFieldEnum = {
  id: 'id',
  nombre_archivo: 'nombre_archivo',
  hash_archivo: 'hash_archivo',
  ano_detectado: 'ano_detectado',
  meses_detectados: 'meses_detectados',
  total_registros: 'total_registros',
  registros_nuevos: 'registros_nuevos',
  registros_duplicados: 'registros_duplicados',
  estado_procesamiento: 'estado_procesamiento',
  tiempo_procesamiento: 'tiempo_procesamiento',
  errores_validacion: 'errores_validacion',
  advertencias: 'advertencias',
  fecha_procesamiento: 'fecha_procesamiento',
  usuario_carga: 'usuario_carga'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Inspeccion: 'Inspeccion',
  HistorialConductor: 'HistorialConductor',
  MetricasReporte: 'MetricasReporte',
  ArchivosProcesados: 'ArchivosProcesados'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
