{"ast":null,"code":"import { apiClient, handleApiError } from './api';\nclass UploadService {\n  // üì§ Validar archivo Excel antes de procesar\n  async validateFile(file) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await apiClient.post('/upload/validate', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 60000 // 1 minuto para validaci√≥n\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error validando archivo');\n    } catch (error) {\n      console.error('[UploadService] Error en validateFile:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üöÄ Procesar archivo Excel\n  async uploadExcelFile(file, options, onProgress) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      if (options !== null && options !== void 0 && options.overwriteDuplicates) {\n        formData.append('overwriteDuplicates', 'true');\n      }\n      if (options !== null && options !== void 0 && options.validateOnly) {\n        formData.append('validateOnly', 'true');\n      }\n      if (options !== null && options !== void 0 && options.batchSize) {\n        formData.append('batchSize', options.batchSize.toString());\n      }\n      const response = await apiClient.post('/upload/excel', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 300000,\n        // 5 minutos para procesamiento\n        onUploadProgress: progressEvent => {\n          if (onProgress && progressEvent.total) {\n            const progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n            onProgress(progress);\n          }\n        }\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error procesando archivo Excel');\n    } catch (error) {\n      console.error('[UploadService] Error en uploadExcelFile:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üìä Obtener historial de archivos procesados\n  async getUploadHistory(filters) {\n    try {\n      const response = await apiClient.get('/upload/history', {\n        params: filters\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo historial de uploads');\n    } catch (error) {\n      console.error('[UploadService] Error en getUploadHistory:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üóëÔ∏è Revertir procesamiento de archivo\n  async revertUpload(fileId, reason) {\n    try {\n      const response = await apiClient.delete(`/upload/revert/${fileId}`, {\n        data: {\n          reason\n        }\n      });\n      return response.data.success;\n    } catch (error) {\n      console.error('[UploadService] Error en revertUpload:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üìà Obtener estad√≠sticas de uploads\n  async getUploadStats(period) {\n    try {\n      const response = await apiClient.get('/upload/stats', {\n        params: {\n          period\n        }\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo estad√≠sticas de uploads');\n    } catch (error) {\n      console.error('[UploadService] Error en getUploadStats:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üìä Obtener plantillas de Excel disponibles\n  async getExcelTemplates() {\n    try {\n      const response = await apiClient.get('/upload/templates');\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo plantillas Excel');\n    } catch (error) {\n      console.error('[UploadService] Error en getExcelTemplates:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üì• Descargar plantilla de Excel\n  async downloadTemplate(templateName) {\n    try {\n      const response = await apiClient.get(`/upload/templates/${templateName}`, {\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('[UploadService] Error en downloadTemplate:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üîç Validar formato de archivo\n  validateFileFormat(file) {\n    const errors = [];\n\n    // Validar extensi√≥n\n    const allowedExtensions = ['.xlsx', '.xls'];\n    const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\n    if (!allowedExtensions.includes(fileExtension)) {\n      errors.push(`Formato de archivo no v√°lido. Se permiten: ${allowedExtensions.join(', ')}`);\n    }\n\n    // Validar tama√±o (m√°ximo 50MB)\n    const maxSize = 50 * 1024 * 1024; // 50MB\n    if (file.size > maxSize) {\n      errors.push(`El archivo es demasiado grande. Tama√±o m√°ximo: 50MB`);\n    }\n\n    // Validar tama√±o m√≠nimo\n    const minSize = 1024; // 1KB\n    if (file.size < minSize) {\n      errors.push('El archivo est√° vac√≠o o es demasiado peque√±o');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  // üìä Obtener progreso de procesamiento (para archivos grandes)\n  async getProcessingProgress(uploadId) {\n    try {\n      const response = await apiClient.get(`/upload/progress/${uploadId}`);\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo progreso');\n    } catch (error) {\n      console.error('[UploadService] Error en getProcessingProgress:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üîÑ Reintentar procesamiento fallido\n  async retryFailedUpload(fileId) {\n    try {\n      const response = await apiClient.post(`/upload/retry/${fileId}`);\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error reintentando procesamiento');\n    } catch (error) {\n      console.error('[UploadService] Error en retryFailedUpload:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üìã Obtener detalles de un upload espec√≠fico\n  async getUploadDetails(fileId) {\n    try {\n      const response = await apiClient.get(`/upload/details/${fileId}`);\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo detalles del upload');\n    } catch (error) {\n      console.error('[UploadService] Error en getUploadDetails:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üßπ Limpiar uploads antiguos\n  async cleanupOldUploads(olderThanDays = 90) {\n    try {\n      const response = await apiClient.post('/upload/cleanup', {\n        olderThanDays\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error limpiando uploads antiguos');\n    } catch (error) {\n      console.error('[UploadService] Error en cleanupOldUploads:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n}\nexport const uploadService = new UploadService();\nexport default uploadService;","map":{"version":3,"names":["apiClient","handleApiError","UploadService","validateFile","file","formData","FormData","append","response","post","headers","timeout","data","success","Error","message","error","console","uploadExcelFile","options","onProgress","overwriteDuplicates","validateOnly","batchSize","toString","onUploadProgress","progressEvent","total","progress","Math","round","loaded","getUploadHistory","filters","get","params","revertUpload","fileId","reason","delete","getUploadStats","period","getExcelTemplates","downloadTemplate","templateName","responseType","validateFileFormat","errors","allowedExtensions","fileExtension","name","toLowerCase","substring","lastIndexOf","includes","push","join","maxSize","size","minSize","isValid","length","getProcessingProgress","uploadId","retryFailedUpload","getUploadDetails","cleanupOldUploads","olderThanDays","uploadService"],"sources":["C:/Users/juan/Desktop/exelfinal/frontend/src/services/uploadService.ts"],"sourcesContent":["import { apiClient, ApiResponse, handleApiError } from './api';\r\n\r\nexport interface UploadResult {\r\n  success: boolean;\r\n  fileName: string;\r\n  fileHash: string;\r\n  totalRecords: number;\r\n  newRecords: number;\r\n  duplicateRecords: number;\r\n  processingTime: number;\r\n  detectedYear: number;\r\n  detectedMonths: number[];\r\n  validationErrors?: string[];\r\n  warnings?: string[];\r\n}\r\n\r\nexport interface ValidationResult {\r\n  isValid: boolean;\r\n  fileName: string;\r\n  fileSize: number;\r\n  detectedYear?: number;\r\n  detectedMonths?: number[];\r\n  estimatedRecords?: number;\r\n  errors: string[];\r\n  warnings: string[];\r\n  recommendations?: string[];\r\n}\r\n\r\nexport interface UploadHistory {\r\n  id: string;\r\n  fileName: string;\r\n  uploadDate: string;\r\n  totalRecords: number;\r\n  newRecords: number;\r\n  duplicateRecords: number;\r\n  processingTime: number;\r\n  status: 'PROCESADO' | 'ERROR' | 'REVERTIDO';\r\n  user?: string;\r\n}\r\n\r\nexport interface UploadStats {\r\n  totalUploads: number;\r\n  totalRecordsProcessed: number;\r\n  averageProcessingTime: number;\r\n  successRate: number;\r\n  lastUpload?: string;\r\n  monthlyStats: Array<{\r\n    month: string;\r\n    uploads: number;\r\n    records: number;\r\n  }>;\r\n}\r\n\r\nexport interface ExcelTemplate {\r\n  name: string;\r\n  description: string;\r\n  version: string;\r\n  requiredColumns: string[];\r\n  optionalColumns: string[];\r\n  downloadUrl: string;\r\n}\r\n\r\nclass UploadService {\r\n  // üì§ Validar archivo Excel antes de procesar\r\n  async validateFile(file: File): Promise<ValidationResult> {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      \r\n      const response = await apiClient.post<ApiResponse<ValidationResult>>('/upload/validate', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        timeout: 60000, // 1 minuto para validaci√≥n\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error validando archivo');\r\n    } catch (error) {\r\n      console.error('[UploadService] Error en validateFile:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üöÄ Procesar archivo Excel\r\n  async uploadExcelFile(\r\n    file: File, \r\n    options?: {\r\n      overwriteDuplicates?: boolean;\r\n      validateOnly?: boolean;\r\n      batchSize?: number;\r\n    },\r\n    onProgress?: (progress: number) => void\r\n  ): Promise<UploadResult> {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      \r\n      if (options?.overwriteDuplicates) {\r\n        formData.append('overwriteDuplicates', 'true');\r\n      }\r\n      if (options?.validateOnly) {\r\n        formData.append('validateOnly', 'true');\r\n      }\r\n      if (options?.batchSize) {\r\n        formData.append('batchSize', options.batchSize.toString());\r\n      }\r\n      \r\n      const response = await apiClient.post<ApiResponse<UploadResult>>('/upload/excel', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        timeout: 300000, // 5 minutos para procesamiento\r\n        onUploadProgress: (progressEvent) => {\r\n          if (onProgress && progressEvent.total) {\r\n            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n            onProgress(progress);\r\n          }\r\n        },\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error procesando archivo Excel');\r\n    } catch (error) {\r\n      console.error('[UploadService] Error en uploadExcelFile:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üìä Obtener historial de archivos procesados\r\n  async getUploadHistory(filters?: {\r\n    page?: number;\r\n    limit?: number;\r\n    startDate?: string;\r\n    endDate?: string;\r\n    status?: 'PROCESADO' | 'ERROR' | 'REVERTIDO';\r\n  }): Promise<{\r\n    uploads: UploadHistory[];\r\n    totalCount: number;\r\n    totalPages: number;\r\n    currentPage: number;\r\n  }> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse>('/upload/history', {\r\n        params: filters\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo historial de uploads');\r\n    } catch (error) {\r\n      console.error('[UploadService] Error en getUploadHistory:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üóëÔ∏è Revertir procesamiento de archivo\r\n  async revertUpload(fileId: string, reason?: string): Promise<boolean> {\r\n    try {\r\n      const response = await apiClient.delete<ApiResponse>(`/upload/revert/${fileId}`, {\r\n        data: { reason }\r\n      });\r\n      \r\n      return response.data.success;\r\n    } catch (error) {\r\n      console.error('[UploadService] Error en revertUpload:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üìà Obtener estad√≠sticas de uploads\r\n  async getUploadStats(period?: '7days' | '30days' | '90days' | '1year'): Promise<UploadStats> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<UploadStats>>('/upload/stats', {\r\n        params: { period }\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo estad√≠sticas de uploads');\r\n    } catch (error) {\r\n      console.error('[UploadService] Error en getUploadStats:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üìä Obtener plantillas de Excel disponibles\r\n  async getExcelTemplates(): Promise<ExcelTemplate[]> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<ExcelTemplate[]>>('/upload/templates');\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo plantillas Excel');\r\n    } catch (error) {\r\n      console.error('[UploadService] Error en getExcelTemplates:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üì• Descargar plantilla de Excel\r\n  async downloadTemplate(templateName: string): Promise<Blob> {\r\n    try {\r\n      const response = await apiClient.get(`/upload/templates/${templateName}`, {\r\n        responseType: 'blob'\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[UploadService] Error en downloadTemplate:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üîç Validar formato de archivo\r\n  validateFileFormat(file: File): {\r\n    isValid: boolean;\r\n    errors: string[];\r\n  } {\r\n    const errors: string[] = [];\r\n    \r\n    // Validar extensi√≥n\r\n    const allowedExtensions = ['.xlsx', '.xls'];\r\n    const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\r\n    \r\n    if (!allowedExtensions.includes(fileExtension)) {\r\n      errors.push(`Formato de archivo no v√°lido. Se permiten: ${allowedExtensions.join(', ')}`);\r\n    }\r\n    \r\n    // Validar tama√±o (m√°ximo 50MB)\r\n    const maxSize = 50 * 1024 * 1024; // 50MB\r\n    if (file.size > maxSize) {\r\n      errors.push(`El archivo es demasiado grande. Tama√±o m√°ximo: 50MB`);\r\n    }\r\n    \r\n    // Validar tama√±o m√≠nimo\r\n    const minSize = 1024; // 1KB\r\n    if (file.size < minSize) {\r\n      errors.push('El archivo est√° vac√≠o o es demasiado peque√±o');\r\n    }\r\n    \r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors\r\n    };\r\n  }\r\n\r\n  // üìä Obtener progreso de procesamiento (para archivos grandes)\r\n  async getProcessingProgress(uploadId: string): Promise<{\r\n    status: 'PROCESSING' | 'COMPLETED' | 'ERROR';\r\n    progress: number;\r\n    currentStep: string;\r\n    estimatedTimeRemaining?: number;\r\n    recordsProcessed?: number;\r\n    totalRecords?: number;\r\n  }> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse>(`/upload/progress/${uploadId}`);\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo progreso');\r\n    } catch (error) {\r\n      console.error('[UploadService] Error en getProcessingProgress:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üîÑ Reintentar procesamiento fallido\r\n  async retryFailedUpload(fileId: string): Promise<UploadResult> {\r\n    try {\r\n      const response = await apiClient.post<ApiResponse<UploadResult>>(`/upload/retry/${fileId}`);\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error reintentando procesamiento');\r\n    } catch (error) {\r\n      console.error('[UploadService] Error en retryFailedUpload:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üìã Obtener detalles de un upload espec√≠fico\r\n  async getUploadDetails(fileId: string): Promise<{\r\n    upload: UploadHistory;\r\n    validationDetails: ValidationResult;\r\n    processingLog: Array<{\r\n      timestamp: string;\r\n      level: 'INFO' | 'WARNING' | 'ERROR';\r\n      message: string;\r\n    }>;\r\n    sampleData?: any[];\r\n  }> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse>(`/upload/details/${fileId}`);\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo detalles del upload');\r\n    } catch (error) {\r\n      console.error('[UploadService] Error en getUploadDetails:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üßπ Limpiar uploads antiguos\r\n  async cleanupOldUploads(olderThanDays: number = 90): Promise<{\r\n    deletedCount: number;\r\n    freedSpace: number;\r\n  }> {\r\n    try {\r\n      const response = await apiClient.post<ApiResponse>('/upload/cleanup', {\r\n        olderThanDays\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error limpiando uploads antiguos');\r\n    } catch (error) {\r\n      console.error('[UploadService] Error en cleanupOldUploads:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n}\r\n\r\nexport const uploadService = new UploadService();\r\nexport default uploadService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}