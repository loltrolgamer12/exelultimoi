{"ast":null,"code":"import { apiClient, handleApiError } from './api';\nclass SearchService {\n  // üîç B√∫squeda general de inspecciones\n  async searchInspections(filters) {\n    try {\n      const response = await apiClient.get('/search/inspections', {\n        params: filters\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error en b√∫squeda de inspecciones');\n    } catch (error) {\n      console.error('[SearchService] Error en searchInspections:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üéØ B√∫squeda avanzada con criterios complejos\n  async advancedSearch(filters) {\n    try {\n      const response = await apiClient.post('/search/advanced', filters);\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error en b√∫squeda avanzada');\n    } catch (error) {\n      console.error('[SearchService] Error en advancedSearch:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üë®‚Äçüíº Obtener historial espec√≠fico de conductor\n  async getDriverHistory(driverId, filters) {\n    try {\n      const response = await apiClient.get(`/search/driver/${driverId}`, {\n        params: filters\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo historial del conductor');\n    } catch (error) {\n      console.error('[SearchService] Error en getDriverHistory:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üöó Obtener historial espec√≠fico de veh√≠culo\n  async getVehicleHistory(placa, filters) {\n    try {\n      const response = await apiClient.get(`/search/vehicle/${placa}`, {\n        params: filters\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo historial del veh√≠culo');\n    } catch (error) {\n      console.error('[SearchService] Error en getVehicleHistory:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üö® Obtener alertas activas y cr√≠ticas\n  async getActiveAlerts(filters) {\n    try {\n      const response = await apiClient.get('/search/alerts', {\n        params: filters\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo alertas activas');\n    } catch (error) {\n      console.error('[SearchService] Error en getActiveAlerts:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üìà Obtener an√°lisis de tendencias\n  async getTrends(filters) {\n    try {\n      const response = await apiClient.get('/search/trends', {\n        params: filters\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo an√°lisis de tendencias');\n    } catch (error) {\n      console.error('[SearchService] Error en getTrends:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üìä Obtener res√∫menes por categor√≠a\n  async getSummary(type, options) {\n    try {\n      const response = await apiClient.get(`/search/summary/${type}`, {\n        params: options\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data.summary;\n      }\n      throw new Error(response.data.message || 'Error obteniendo resumen');\n    } catch (error) {\n      console.error('[SearchService] Error en getSummary:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üì§ Exportar resultados de b√∫squeda\n  async exportSearchResults(searchParams, options) {\n    try {\n      const requestData = {\n        searchParams,\n        ...options\n      };\n      if (options.format === 'json') {\n        const response = await apiClient.post('/search/export', requestData);\n        if (response.data.success) {\n          return response.data.data;\n        }\n        throw new Error(response.data.message || 'Error exportando datos');\n      } else {\n        // Para otros formatos, esperamos un blob\n        const response = await apiClient.post('/search/export', requestData, {\n          responseType: 'blob'\n        });\n        return response.data;\n      }\n    } catch (error) {\n      console.error('[SearchService] Error en exportSearchResults:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // üîÑ Refrescar cache de b√∫squedas\n  async refreshCache(type) {\n    try {\n      const response = await apiClient.post(`/search/refresh/${type || 'all'}`);\n      return response.data.success;\n    } catch (error) {\n      console.error('[SearchService] Error en refreshCache:', error);\n      return false;\n    }\n  }\n\n  // üîç B√∫squeda r√°pida (para autocomplete)\n  async quickSearch(query, type) {\n    try {\n      // Esta funcionalidad se puede implementar como una extensi√≥n del endpoint de b√∫squeda\n      const filters = {\n        limit: 10\n      };\n      if (type === 'conductores') {\n        filters.conductor = query;\n      } else if (type === 'vehiculos') {\n        filters.placa = query;\n      } else if (type === 'contratos') {\n        filters.contrato = query;\n      }\n      const result = await this.searchInspections(filters);\n\n      // Procesar resultados para autocomplete\n      const suggestions = [];\n      result.inspecciones.forEach(inspeccion => {\n        if (type === 'conductores' || !type) {\n          suggestions.push({\n            id: inspeccion.conductor_cedula,\n            label: inspeccion.conductor_nombre,\n            type: 'conductor',\n            extra: inspeccion.conductor_cedula\n          });\n        }\n        if (type === 'vehiculos' || !type) {\n          suggestions.push({\n            id: inspeccion.placa_vehiculo,\n            label: inspeccion.placa_vehiculo,\n            type: 'vehiculo'\n          });\n        }\n        if (type === 'contratos' || !type) {\n          suggestions.push({\n            id: inspeccion.contrato,\n            label: inspeccion.contrato,\n            type: 'contrato'\n          });\n        }\n      });\n\n      // Eliminar duplicados\n      const uniqueSuggestions = suggestions.filter((item, index, self) => index === self.findIndex(t => t.id === item.id && t.type === item.type));\n      return uniqueSuggestions.slice(0, 10);\n    } catch (error) {\n      console.error('[SearchService] Error en quickSearch:', error);\n      return [];\n    }\n  }\n}\nexport const searchService = new SearchService();\nexport default searchService;","map":{"version":3,"names":["apiClient","handleApiError","SearchService","searchInspections","filters","response","get","params","data","success","Error","message","error","console","advancedSearch","post","getDriverHistory","driverId","getVehicleHistory","placa","getActiveAlerts","getTrends","getSummary","type","options","summary","exportSearchResults","searchParams","requestData","format","responseType","refreshCache","quickSearch","query","limit","conductor","contrato","result","suggestions","inspecciones","forEach","inspeccion","push","id","conductor_cedula","label","conductor_nombre","extra","placa_vehiculo","uniqueSuggestions","filter","item","index","self","findIndex","t","slice","searchService"],"sources":["C:/Users/juan/Desktop/exelfinal/frontend/src/services/searchService.ts"],"sourcesContent":["import { apiClient, ApiResponse, InspeccionData, SearchFilters, TrendData, handleApiError } from './api';\r\n\r\nexport interface SearchResult {\r\n  inspecciones: InspeccionData[];\r\n  totalFound: number;\r\n  totalPages: number;\r\n  currentPage: number;\r\n  filters: SearchFilters;\r\n}\r\n\r\nexport interface AdvancedSearchFilters extends SearchFilters {\r\n  puntajeMinimo?: number;\r\n  puntajeMaximo?: number;\r\n  tipoProblema?: 'medicamentos' | 'sueno' | 'fatiga' | 'aptitud';\r\n  severidad?: 'baja' | 'media' | 'alta' | 'critica';\r\n  ordenarPor?: 'fecha' | 'puntaje' | 'conductor' | 'vehiculo';\r\n  orden?: 'asc' | 'desc';\r\n}\r\n\r\nexport interface DriverHistory {\r\n  conductor: {\r\n    nombre: string;\r\n    cedula: string;\r\n    totalInspecciones: number;\r\n    alertasRojas: number;\r\n    advertencias: number;\r\n    promedioRiesgo: number;\r\n    ultimaInspeccion: string;\r\n  };\r\n  historial: InspeccionData[];\r\n  estadisticas: {\r\n    eficiencia: number;\r\n    problemasRecurrentes: string[];\r\n    tendencia: 'mejorando' | 'estable' | 'empeorando';\r\n  };\r\n  alertasFatiga: {\r\n    medicamentos: number;\r\n    suenoInsuficiente: number;\r\n    sintomasFatiga: number;\r\n    noApto: number;\r\n  };\r\n}\r\n\r\nexport interface VehicleHistory {\r\n  vehiculo: {\r\n    placa: string;\r\n    totalInspecciones: number;\r\n    alertasRojas: number;\r\n    advertencias: number;\r\n    ultimaInspeccion: string;\r\n  };\r\n  historial: InspeccionData[];\r\n  estadisticas: {\r\n    eficiencia: number;\r\n    problemasRecurrentes: string[];\r\n    mantenimientoRequerido: boolean;\r\n  };\r\n  conductoresAsignados: Array<{\r\n    nombre: string;\r\n    cedula: string;\r\n    inspecciones: number;\r\n  }>;\r\n}\r\n\r\nexport interface ActiveAlert {\r\n  id: string;\r\n  tipo: 'CRITICA' | 'ADVERTENCIA';\r\n  fecha: string;\r\n  conductor: string;\r\n  vehiculo: string;\r\n  descripcion: string;\r\n  estado: 'ACTIVA' | 'EN_REVISION' | 'RESUELTA';\r\n  prioridad: 'ALTA' | 'MEDIA' | 'BAJA';\r\n}\r\n\r\nclass SearchService {\r\n  // üîç B√∫squeda general de inspecciones\r\n  async searchInspections(filters: SearchFilters): Promise<SearchResult> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<SearchResult>>('/search/inspections', {\r\n        params: filters\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error en b√∫squeda de inspecciones');\r\n    } catch (error) {\r\n      console.error('[SearchService] Error en searchInspections:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üéØ B√∫squeda avanzada con criterios complejos\r\n  async advancedSearch(filters: AdvancedSearchFilters): Promise<SearchResult> {\r\n    try {\r\n      const response = await apiClient.post<ApiResponse<SearchResult>>('/search/advanced', filters);\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error en b√∫squeda avanzada');\r\n    } catch (error) {\r\n      console.error('[SearchService] Error en advancedSearch:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üë®‚Äçüíº Obtener historial espec√≠fico de conductor\r\n  async getDriverHistory(driverId: string, filters?: {\r\n    fechaInicio?: string;\r\n    fechaFin?: string;\r\n    limite?: number;\r\n  }): Promise<DriverHistory> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<DriverHistory>>(`/search/driver/${driverId}`, {\r\n        params: filters\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo historial del conductor');\r\n    } catch (error) {\r\n      console.error('[SearchService] Error en getDriverHistory:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üöó Obtener historial espec√≠fico de veh√≠culo\r\n  async getVehicleHistory(placa: string, filters?: {\r\n    fechaInicio?: string;\r\n    fechaFin?: string;\r\n    limite?: number;\r\n  }): Promise<VehicleHistory> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<VehicleHistory>>(`/search/vehicle/${placa}`, {\r\n        params: filters\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo historial del veh√≠culo');\r\n    } catch (error) {\r\n      console.error('[SearchService] Error en getVehicleHistory:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üö® Obtener alertas activas y cr√≠ticas\r\n  async getActiveAlerts(filters?: {\r\n    tipo?: 'CRITICA' | 'ADVERTENCIA' | 'TODAS';\r\n    estado?: 'ACTIVA' | 'EN_REVISION' | 'RESUELTA';\r\n    limite?: number;\r\n  }): Promise<ActiveAlert[]> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<ActiveAlert[]>>('/search/alerts', {\r\n        params: filters\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo alertas activas');\r\n    } catch (error) {\r\n      console.error('[SearchService] Error en getActiveAlerts:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üìà Obtener an√°lisis de tendencias\r\n  async getTrends(filters: {\r\n    periodo?: '7days' | '30days' | '90days';\r\n    groupBy?: 'day' | 'week' | 'month';\r\n    metrics?: 'all' | 'fatigue' | 'safety';\r\n  }): Promise<{\r\n    periodo: {\r\n      inicio: string;\r\n      fin: string;\r\n      dias: number;\r\n    };\r\n    tendencias: TrendData[];\r\n    resumen: {\r\n      totalInspecciones: number;\r\n      totalAlertas: number;\r\n      totalAdvertencias: number;\r\n      tasaPromediaAlertas: number;\r\n      tasaPromediaAdvertencias: number;\r\n      puntajePromedioGeneral: number;\r\n    };\r\n    analisisFatiga: {\r\n      totalMedicamentos: number;\r\n      totalSuenoInsuficiente: number;\r\n      totalSintomasFatiga: number;\r\n      totalNoAptos: number;\r\n      tendenciaFatiga: 'mejorando' | 'estable' | 'empeorando';\r\n    };\r\n  }> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse>('/search/trends', {\r\n        params: filters\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo an√°lisis de tendencias');\r\n    } catch (error) {\r\n      console.error('[SearchService] Error en getTrends:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üìä Obtener res√∫menes por categor√≠a\r\n  async getSummary(type: 'conductores' | 'vehiculos' | 'contratos' | 'fatiga', options?: {\r\n    timeframe?: '7days' | '30days' | '90days';\r\n    limit?: number;\r\n  }): Promise<any> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse>(`/search/summary/${type}`, {\r\n        params: options\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data.summary;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo resumen');\r\n    } catch (error) {\r\n      console.error('[SearchService] Error en getSummary:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üì§ Exportar resultados de b√∫squeda\r\n  async exportSearchResults(searchParams: any, options: {\r\n    format: 'json' | 'csv' | 'excel' | 'pdf';\r\n    filename?: string;\r\n    includeCharts?: boolean;\r\n    template?: string;\r\n  }): Promise<Blob | any> {\r\n    try {\r\n      const requestData = {\r\n        searchParams,\r\n        ...options\r\n      };\r\n\r\n      if (options.format === 'json') {\r\n        const response = await apiClient.post<ApiResponse>('/search/export', requestData);\r\n        \r\n        if (response.data.success) {\r\n          return response.data.data;\r\n        }\r\n        \r\n        throw new Error(response.data.message || 'Error exportando datos');\r\n      } else {\r\n        // Para otros formatos, esperamos un blob\r\n        const response = await apiClient.post('/search/export', requestData, {\r\n          responseType: 'blob'\r\n        });\r\n        \r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      console.error('[SearchService] Error en exportSearchResults:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // üîÑ Refrescar cache de b√∫squedas\r\n  async refreshCache(type?: 'all' | 'inspections' | 'drivers' | 'vehicles'): Promise<boolean> {\r\n    try {\r\n      const response = await apiClient.post<ApiResponse>(`/search/refresh/${type || 'all'}`);\r\n      \r\n      return response.data.success;\r\n    } catch (error) {\r\n      console.error('[SearchService] Error en refreshCache:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // üîç B√∫squeda r√°pida (para autocomplete)\r\n  async quickSearch(query: string, type?: 'conductores' | 'vehiculos' | 'contratos'): Promise<Array<{\r\n    id: string;\r\n    label: string;\r\n    type: string;\r\n    extra?: string;\r\n  }>> {\r\n    try {\r\n      // Esta funcionalidad se puede implementar como una extensi√≥n del endpoint de b√∫squeda\r\n      const filters: SearchFilters = {\r\n        limit: 10\r\n      };\r\n\r\n      if (type === 'conductores') {\r\n        filters.conductor = query;\r\n      } else if (type === 'vehiculos') {\r\n        filters.placa = query;\r\n      } else if (type === 'contratos') {\r\n        filters.contrato = query;\r\n      }\r\n\r\n      const result = await this.searchInspections(filters);\r\n      \r\n      // Procesar resultados para autocomplete\r\n      const suggestions: Array<{id: string; label: string; type: string; extra?: string}> = [];\r\n      \r\n      result.inspecciones.forEach(inspeccion => {\r\n        if (type === 'conductores' || !type) {\r\n          suggestions.push({\r\n            id: inspeccion.conductor_cedula,\r\n            label: inspeccion.conductor_nombre,\r\n            type: 'conductor',\r\n            extra: inspeccion.conductor_cedula\r\n          });\r\n        }\r\n        \r\n        if (type === 'vehiculos' || !type) {\r\n          suggestions.push({\r\n            id: inspeccion.placa_vehiculo,\r\n            label: inspeccion.placa_vehiculo,\r\n            type: 'vehiculo'\r\n          });\r\n        }\r\n        \r\n        if (type === 'contratos' || !type) {\r\n          suggestions.push({\r\n            id: inspeccion.contrato,\r\n            label: inspeccion.contrato,\r\n            type: 'contrato'\r\n          });\r\n        }\r\n      });\r\n\r\n      // Eliminar duplicados\r\n      const uniqueSuggestions = suggestions.filter((item, index, self) => \r\n        index === self.findIndex(t => t.id === item.id && t.type === item.type)\r\n      );\r\n\r\n      return uniqueSuggestions.slice(0, 10);\r\n    } catch (error) {\r\n      console.error('[SearchService] Error en quickSearch:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport const searchService = new SearchService();\r\nexport default searchService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}