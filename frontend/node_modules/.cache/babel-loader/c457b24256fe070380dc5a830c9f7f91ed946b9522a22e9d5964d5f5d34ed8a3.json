{"ast":null,"code":"import { apiClient, handleApiError } from './api';\nclass DashboardService {\n  // ðŸ“Š Obtener estadÃ­sticas principales del dashboard\n  async getMainStats(filters) {\n    try {\n      const response = await apiClient.get('/dashboard/stats', {\n        params: filters\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo estadÃ­sticas');\n    } catch (error) {\n      console.error('[DashboardService] Error en getMainStats:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // ðŸ“ˆ Obtener mÃ©tricas de rendimiento\n  async getPerformanceMetrics(periodo = '30days') {\n    try {\n      const response = await apiClient.get('/dashboard/performance', {\n        params: {\n          periodo\n        }\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo mÃ©tricas de rendimiento');\n    } catch (error) {\n      console.error('[DashboardService] Error en getPerformanceMetrics:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // ðŸŽ¯ Obtener KPIs (Indicadores Clave de Rendimiento)\n  async getKPIs(filters) {\n    try {\n      const response = await apiClient.get('/dashboard/kpis', {\n        params: filters\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo KPIs');\n    } catch (error) {\n      console.error('[DashboardService] Error en getKPIs:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // ðŸ“Š Obtener datos para widgets del dashboard\n  async getWidgets() {\n    try {\n      const response = await apiClient.get('/dashboard/widgets');\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo datos de widgets');\n    } catch (error) {\n      console.error('[DashboardService] Error en getWidgets:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // ðŸš¨ Obtener panel de alertas\n  async getAlertsPanel(filters) {\n    try {\n      const response = await apiClient.get('/dashboard/alerts', {\n        params: filters\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo panel de alertas');\n    } catch (error) {\n      console.error('[DashboardService] Error en getAlertsPanel:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // ðŸ“‹ Obtener reporte ejecutivo\n  async getExecutiveReport(periodo = '30days') {\n    try {\n      const response = await apiClient.get('/dashboard/executive-report', {\n        params: {\n          periodo\n        }\n      });\n      if (response.data.success && response.data.data) {\n        return response.data.data;\n      }\n      throw new Error(response.data.message || 'Error obteniendo reporte ejecutivo');\n    } catch (error) {\n      console.error('[DashboardService] Error en getExecutiveReport:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // ðŸ“„ Descargar reporte diario en PDF\n  async downloadDailyReport(options = {}) {\n    try {\n      const response = await apiClient.get('/dashboard/pdf/daily-report', {\n        params: options,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('[DashboardService] Error en downloadDailyReport:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // ðŸ“Š Descargar resumen ejecutivo en PDF\n  async downloadExecutiveSummary(options = {}) {\n    try {\n      const response = await apiClient.get('/dashboard/pdf/executive-summary', {\n        params: options,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('[DashboardService] Error en downloadExecutiveSummary:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // ðŸš¨ Descargar anÃ¡lisis de fatiga en PDF\n  async downloadFatigueAnalysis(options = {}) {\n    try {\n      const response = await apiClient.get('/dashboard/pdf/fatigue-analysis', {\n        params: options,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('[DashboardService] Error en downloadFatigueAnalysis:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // ðŸ“‹ Generar reporte personalizado en PDF\n  async generateCustomReport(options) {\n    try {\n      const response = await apiClient.post('/dashboard/pdf/custom-report', options, {\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('[DashboardService] Error en generateCustomReport:', error);\n      throw new Error(handleApiError(error));\n    }\n  }\n\n  // ðŸ”„ Refrescar datos del dashboard\n  async refreshDashboard() {\n    try {\n      // Implementar lÃ³gica de refresh si es necesario\n      console.log('[DashboardService] Refrescando datos del dashboard...');\n      return true;\n    } catch (error) {\n      console.error('[DashboardService] Error en refreshDashboard:', error);\n      return false;\n    }\n  }\n}\nexport const dashboardService = new DashboardService();\nexport default dashboardService;","map":{"version":3,"names":["apiClient","handleApiError","DashboardService","getMainStats","filters","response","get","params","data","success","Error","message","error","console","getPerformanceMetrics","periodo","getKPIs","getWidgets","getAlertsPanel","getExecutiveReport","downloadDailyReport","options","responseType","downloadExecutiveSummary","downloadFatigueAnalysis","generateCustomReport","post","refreshDashboard","log","dashboardService"],"sources":["C:/Users/juan/Desktop/exelfinal/frontend/src/services/dashboardService.ts"],"sourcesContent":["import { apiClient, ApiResponse, DashboardStats, handleApiError } from './api';\r\n\r\nexport interface WidgetData {\r\n  resumenHoy: {\r\n    inspecciones: number;\r\n    alertasRojas: number;\r\n    advertencias: number;\r\n    conductores: number;\r\n    vehiculos: number;\r\n    eficiencia: number;\r\n  };\r\n  ultimasAlertas: Array<{\r\n    id: string;\r\n    fecha: string;\r\n    conductor_nombre: string;\r\n    placa_vehiculo: string;\r\n    observaciones: string;\r\n    timeAgo: string;\r\n  }>;\r\n  problemasComunes: Array<{\r\n    problema: string;\r\n    count: number;\r\n    percentage: number;\r\n  }>;\r\n  indicadores: {\r\n    tendenciaInspecciones: string;\r\n    alertasCriticas: number;\r\n    statusGeneral: 'green' | 'yellow' | 'red';\r\n  };\r\n}\r\n\r\nexport interface KPIData {\r\n  operacionales: {\r\n    totalInspecciones: number;\r\n    inspeccionesDiarias: number;\r\n    eficiencia: number;\r\n    puntajePromedio: number;\r\n  };\r\n  seguridad: {\r\n    alertasRojas: number;\r\n    advertencias: number;\r\n    tasaAlertasRojas: number;\r\n    tasaAdvertencias: number;\r\n  };\r\n  fatiga: {\r\n    conductoresMedicamentos: number;\r\n    conductoresSuenoInsuficiente: number;\r\n    conductoresConSintomas: number;\r\n    conductoresNoAptos: number;\r\n    indiceFatiga: number;\r\n  };\r\n  metas: {\r\n    eficienciaObjetivo: number;\r\n    tasaAlertasMaxima: number;\r\n    puntajeMinimoObjetivo: number;\r\n    indiceFatigaMaximo: number;\r\n  };\r\n  cumplimiento: {\r\n    eficiencia: boolean;\r\n    alertas: boolean;\r\n    puntaje: boolean;\r\n    fatiga: boolean;\r\n    general: boolean;\r\n  };\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  rendimientoPorContrato: Array<{\r\n    contrato: string;\r\n    totalInspecciones: number;\r\n    alertasRojas: number;\r\n    eficiencia: number;\r\n  }>;\r\n  rendimientoPorCampo: Array<{\r\n    campo: string;\r\n    totalInspecciones: number;\r\n    alertasRojas: number;\r\n    eficiencia: number;\r\n  }>;\r\n  tendenciaMensual: Array<{\r\n    mes: string;\r\n    inspecciones: number;\r\n    alertas: number;\r\n    eficiencia: number;\r\n  }>;\r\n}\r\n\r\nclass DashboardService {\r\n  // ðŸ“Š Obtener estadÃ­sticas principales del dashboard\r\n  async getMainStats(filters?: {\r\n    periodo?: string;\r\n    contrato?: string;\r\n    campo?: string;\r\n  }): Promise<DashboardStats> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<DashboardStats>>('/dashboard/stats', {\r\n        params: filters\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo estadÃ­sticas');\r\n    } catch (error) {\r\n      console.error('[DashboardService] Error en getMainStats:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // ðŸ“ˆ Obtener mÃ©tricas de rendimiento\r\n  async getPerformanceMetrics(periodo: string = '30days'): Promise<PerformanceMetrics> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<PerformanceMetrics>>('/dashboard/performance', {\r\n        params: { periodo }\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo mÃ©tricas de rendimiento');\r\n    } catch (error) {\r\n      console.error('[DashboardService] Error en getPerformanceMetrics:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // ðŸŽ¯ Obtener KPIs (Indicadores Clave de Rendimiento)\r\n  async getKPIs(filters?: {\r\n    periodo?: string;\r\n    contrato?: string;\r\n    campo?: string;\r\n  }): Promise<KPIData> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<KPIData>>('/dashboard/kpis', {\r\n        params: filters\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo KPIs');\r\n    } catch (error) {\r\n      console.error('[DashboardService] Error en getKPIs:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // ðŸ“Š Obtener datos para widgets del dashboard\r\n  async getWidgets(): Promise<WidgetData> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<WidgetData>>('/dashboard/widgets');\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo datos de widgets');\r\n    } catch (error) {\r\n      console.error('[DashboardService] Error en getWidgets:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // ðŸš¨ Obtener panel de alertas\r\n  async getAlertsPanel(filters?: {\r\n    tipo?: 'todas' | 'criticas' | 'advertencias';\r\n    limite?: number;\r\n  }): Promise<any> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse>('/dashboard/alerts', {\r\n        params: filters\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo panel de alertas');\r\n    } catch (error) {\r\n      console.error('[DashboardService] Error en getAlertsPanel:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // ðŸ“‹ Obtener reporte ejecutivo\r\n  async getExecutiveReport(periodo: string = '30days'): Promise<any> {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse>('/dashboard/executive-report', {\r\n        params: { periodo }\r\n      });\r\n      \r\n      if (response.data.success && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Error obteniendo reporte ejecutivo');\r\n    } catch (error) {\r\n      console.error('[DashboardService] Error en getExecutiveReport:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // ðŸ“„ Descargar reporte diario en PDF\r\n  async downloadDailyReport(options: {\r\n    fecha?: string;\r\n    includeCharts?: boolean;\r\n    template?: string;\r\n    contrato?: string;\r\n    campo?: string;\r\n  } = {}): Promise<Blob> {\r\n    try {\r\n      const response = await apiClient.get('/dashboard/pdf/daily-report', {\r\n        params: options,\r\n        responseType: 'blob'\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[DashboardService] Error en downloadDailyReport:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // ðŸ“Š Descargar resumen ejecutivo en PDF\r\n  async downloadExecutiveSummary(options: {\r\n    periodo?: string;\r\n    includeComparisons?: boolean;\r\n    includeProjections?: boolean;\r\n    template?: string;\r\n    logo?: boolean;\r\n  } = {}): Promise<Blob> {\r\n    try {\r\n      const response = await apiClient.get('/dashboard/pdf/executive-summary', {\r\n        params: options,\r\n        responseType: 'blob'\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[DashboardService] Error en downloadExecutiveSummary:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // ðŸš¨ Descargar anÃ¡lisis de fatiga en PDF\r\n  async downloadFatigueAnalysis(options: {\r\n    periodo?: string;\r\n    includeDriverDetails?: boolean;\r\n    includeRecommendations?: boolean;\r\n    template?: string;\r\n  } = {}): Promise<Blob> {\r\n    try {\r\n      const response = await apiClient.get('/dashboard/pdf/fatigue-analysis', {\r\n        params: options,\r\n        responseType: 'blob'\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[DashboardService] Error en downloadFatigueAnalysis:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // ðŸ“‹ Generar reporte personalizado en PDF\r\n  async generateCustomReport(options: {\r\n    titulo?: string;\r\n    filtros?: any;\r\n    secciones?: string[];\r\n    formato?: string;\r\n    includeCharts?: boolean;\r\n    includeData?: boolean;\r\n    logo?: boolean;\r\n  }): Promise<Blob> {\r\n    try {\r\n      const response = await apiClient.post('/dashboard/pdf/custom-report', options, {\r\n        responseType: 'blob'\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[DashboardService] Error en generateCustomReport:', error);\r\n      throw new Error(handleApiError(error));\r\n    }\r\n  }\r\n\r\n  // ðŸ”„ Refrescar datos del dashboard\r\n  async refreshDashboard(): Promise<boolean> {\r\n    try {\r\n      // Implementar lÃ³gica de refresh si es necesario\r\n      console.log('[DashboardService] Refrescando datos del dashboard...');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('[DashboardService] Error en refreshDashboard:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport const dashboardService = new DashboardService();\r\nexport default dashboardService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}